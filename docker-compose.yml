services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"  # RabbitMQ messaging port
      - "15672:15672"  # RabbitMQ management UI
    environment:
      RABBITMQ_DEFAULT_USER: $RABBITMQ_USER
      RABBITMQ_DEFAULT_PASS: $RABBITMQ_PASSWORD
    env_file:
      - .env
    networks:
      - internal_network

  mysql:
    image: mysql:8.0
    container_name: mysql
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 3
    env_file:
      - .env
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - internal_network
      
  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"  # MinIO API
      - "9001:9001"  # MinIO Console
    environment:
      MINIO_ROOT_USER: $MINIO_ROOT_USER
      MINIO_ROOT_PASSWORD: $MINIO_ROOT_PASSWORD
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    env_file:
      - .env
    networks:
      - internal_network

  api:
    build:
      context: .
      dockerfile: ./api/Dockerfile
    container_name: fastapi_app
    ports:
      - "8000:8000"
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_started
      minio:
        condition: service_started
    env_file:
      - .env
    secrets:
      - deprecated_private_key
      - worker_private_key
      - worker_public_key
      - signed_layout
    networks:
      - internal_network
    restart: always

  worker:
    build:
      context: .
      dockerfile: ./worker/Dockerfile
    depends_on:
      - rabbitmq
      - minio
    env_file:
      - .env
    secrets:
      - deprecated_private_key
      - worker_private_key
      - worker_public_key
      - signed_layout
    deploy:
      replicas: 3  # Define 3 replicas for the worker to demonstrate scalability
      resources:
        limits:
          memory: 4g  # Increase memory limit to 4GB
          cpus: "2.0"  # Allow up to 2 CPU cores
        reservations:
          memory: 2g  # Reserve 2GB of memory
          cpus: "1.0"  # Reserve 1 CPU core
    runtime: nvidia  # Ensure this is present (if using your laptop GPU, safest to only use one worker)
    read_only: true
    tmpfs:
      - /tmp
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    networks:
      - internal_network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # Mount Docker socket to allow the worker to communicate with the Docker daemon

  scanner:
    build:
      context: .
      dockerfile: ./scanner/Dockerfile
    env_file:
      - .env
    depends_on:
      - rabbitmq
      - minio
    networks:
      - internal_network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: >
      sh -c "echo 'ENABLE_SCANNER is set to: $ENABLE_SCANNER' &&
            if [ \"$ENABLE_SCANNER\" = \"true\" ]; then
              celery -A tasks beat --loglevel=info &
              celery -A tasks worker --loglevel=info --queues=scanner_queue;
            else
              echo 'Scanner is disabled';
            fi"
  flower:
    build:
      context: .
      dockerfile: ./flower/Dockerfile
    container_name: flower
    command: --port=5555 --basic_auth=$FLOWER_BASIC_AUTH
    ports:
      - "5555:5555"
    depends_on:
      - rabbitmq
      - worker
      - scanner
    env_file:
      - .env
    networks:
      - internal_network

networks:
  internal_network:
    driver: bridge

volumes:
  minio_data:
    driver: local
  mysql_data:
    driver: local

secrets:
  deprecated_private_key:
    file: ./secrets/private_key.pem
  worker_private_key:
    file: ./secrets/worker_private_key.pem
  worker_public_key:
    file: ./secrets/worker_public_key.json
  signed_layout:
    file: ./secrets/signed_layout.json
  layout:
    file: ./secrets/layout.json
